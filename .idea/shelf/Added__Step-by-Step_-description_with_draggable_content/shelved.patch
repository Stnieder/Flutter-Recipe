Index: lib/newRecipe/new_recipe.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'dart:async';\nimport 'dart:core';\nimport 'dart:io';\nimport 'dart:math';\nimport 'package:flutter/material.dart';\nimport 'package:outline_material_icons/outline_material_icons.dart';\nimport 'package:image_picker/image_picker.dart';\nimport 'package:flutter_list_drag_and_drop/drag_and_drop_list.dart';\n\nimport 'package:recipe/interface/CircularImage.dart';\nimport 'package:recipe/interface/lightMaterial.dart';\nimport 'package:recipe/Dialogs.dart';\n\nclass NewRecipe extends StatefulWidget{\n  @override\n  State<StatefulWidget> createState() => _NewRecipe();\n}\n\nclass _NewRecipe extends State<NewRecipe>{\n  Dialogs dialogs = new Dialogs();\n\n  ScrollController scrollController = new ScrollController();\n  File _image;\n\n  String selectedMass;\n  List<String> masses = [\"kg\", \"g\", \"l\", \"mg\", \"TL\", \"EL\"];\n\n  List<double> zNumber = [];\n  List<String> zMass = [];\n  List<String> zNamen = [];\n  double zutatenHeight = 0.0;\n\n  final TextEditingController zNumberController = new TextEditingController();\n  final TextEditingController zNamenController = new TextEditingController();\n\n  GlobalKey<ScaffoldState> _scaffoldKey = new GlobalKey();\n\n  final TextEditingController stepDescriptionController = new TextEditingController();\n  GlobalKey<FormState> stepDescriptionKey = new GlobalKey<FormState>();\n  double descriptionHeight = 0.0;\n  List<String> stepDescription = [];\n  int descriptionCounter = 0;\n\n  int personenAnzahl;\n\n  @override\n  void initState(){\n    super.initState();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final theme = Theme.of(context);\n\n    return Scaffold(\n      key: _scaffoldKey,\n      appBar: AppBar(\n        actions: <Widget>[\n          IconButton(\n            onPressed: (){},\n            icon: Icon(\n              Icons.check,\n              color: Colors.green[400],\n            ),\n          ),\n        ],\n        backgroundColor: Colors.white,\n        leading: IconButton(\n          onPressed: () async{\n            var result = await dialogs.closeDialog(context);\n            if(result == \"verwerfen\") Navigator.pop(context);\n          },\n          icon: Icon(\n            Icons.close,\n            color: Colors.grey[500],\n          ),\n        ),\n        title: Text(\n          \"Rezept erstellen\",\n          style: TextStyle(\n            color: Colors.black,\n            fontFamily: \"Google-Sans\",\n            fontWeight: FontWeight.normal,\n            fontSize: 17.0\n          ),\n        ),\n      ),\n      body: ListView(\n        children: <Widget>[\n          Padding(\n            padding: EdgeInsets.only(top: 10.0, bottom: 20.0, left: 179.0, right: 179.0),\n            child: GestureDetector(\n              child: Container(\n                child: (_image == null\n                  ? CircleAvatar(child: Icon(OMIcons.addAPhoto))\n                  : CircularImage(_image)\n                ),\n                height: 52.0,\n                width: 50.0,\n              ),\n              onTap: () async{\n                String takePhoto = await dialogs.takePhoto(context);\n                if(takePhoto == \"machen\") getImage(ImageSource.camera);\n                else if(takePhoto == \"auswählen\") getImage(ImageSource.gallery);\n              },\n            ),\n          ),\n          Row(\n            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n            children: <Widget>[\n              Padding(\n                padding: EdgeInsets.only(left: 20.0),\n              ),\n              InkWell(\n                borderRadius: BorderRadius.circular(10.0),\n                onTap: () async{\n                  var returnedNumber = await dialogs.personenAnzahl(context);\n                  print(returnedNumber);\n                },\n                child: Column(\n                  children: <Widget>[\n                    Icon(OMIcons.group),\n                    Center(child: Text(personenAnzahl == null\n                      ? \"-\"\n                      : personenAnzahl\n                    ))\n                  ],\n                ),\n              ),\n              InkWell(\n                borderRadius: BorderRadius.circular(10.0),\n                onTap: (){\n                  //dialog mit eingabe der zeit der zubereitung\n                },\n                child: Column(\n                  children: <Widget>[\n                    Icon(OMIcons.avTimer),\n                    Center(child: Text(\"-\"))\n                  ],\n                ),\n              ),\n              Padding(\n                padding: EdgeInsets.only(right: 20.0),\n              )\n            ],\n          ),\n          Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: <Widget>[\n              Padding(\n                  padding: EdgeInsets.only(top: 10.0, left: 10.0, bottom: 0.0),\n                  child: Text(\n                    \"Allgemein\",\n                    style: TextStyle(\n                        fontFamily: \"Google-Sans\",\n                        fontWeight: FontWeight.w500,\n                        fontSize: 13.0,\n                        color: Colors.grey[500]\n                    ),\n                  )\n              ),\n              Column(\n                children: <Widget>[\n                  ListTile(\n                    leading: Padding(\n                      padding: EdgeInsets.only(bottom: 20.0),\n                      child: Icon(OMIcons.fastfood),\n                    ),\n                    title: TextField(\n                        autofocus: true,\n                        decoration: InputDecoration(\n                          hintText: \"Name\",\n                        ),\n                        maxLength: 30,\n                        maxLengthEnforced: true\n                    ),\n                  ),\n                  ListTile(\n                    leading: Padding(\n                      padding: EdgeInsets.only(bottom: 20.0),\n                      child: Icon(OMIcons.subject),\n                    ),\n                    title: TextField(\n                      decoration: InputDecoration(\n                          hintText: \"Beschreibe dein Rezept...\"\n                      ),\n                      keyboardType: TextInputType.multiline,\n                      maxLines: null,\n                      maxLength: 200,\n                    ),\n                  )\n                ],\n              ),\n              Divider()\n            ],\n          ),\n          Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: <Widget>[\n              Padding(\n                  padding: EdgeInsets.only(top: 10.0, left: 10.0, bottom: 0.0),\n                  child: Text(\n                    \"Zutaten\",\n                    style: TextStyle(\n                        fontFamily: \"Google-Sans\",\n                        fontWeight: FontWeight.w500,\n                        fontSize: 13.0,\n                        color: Colors.grey[500]\n                    ),\n                  )\n              ),\n              Column(\n                children: <Widget>[\n                  ListTile(\n                    leading: IconButton(\n                      icon: Icon(Icons.close),\n                      onPressed: (){\n                        zNumberController.clear();\n                        selectedMass = null;\n                        zNamenController.clear();\n                        setState(() {\n                        });\n                      },\n                      tooltip: \"leeren\",\n                    ),\n                    title: Row(\n                      children: <Widget>[\n                        Container(\n                          width: 50.0,\n                          child: Padding(\n                            padding: EdgeInsets.only(top: 8.0, right: 5.0),\n                            child: TextFormField(\n                              controller: zNumberController,\n                              decoration: InputDecoration(\n                                border: UnderlineInputBorder(\n                                  borderRadius: BorderRadius.all(Radius.circular(2.0)),\n                                ),\n                                contentPadding: EdgeInsets.only(bottom: 5.0),\n                                enabledBorder: UnderlineInputBorder(\n                                  borderSide: BorderSide(color: Colors.black12, style: BorderStyle.solid),\n                                ),\n                                hintText: \"2.0\"\n                              ),\n                              textAlign: TextAlign.center,\n                              keyboardType: TextInputType.number,\n                            ),\n                          )\n                        ),\n                        Container(\n                          child: new DropdownButton(\n                            items: masses.map((String value){\n                              return new DropdownMenuItem<String>(\n                                value: value,\n                                child: new Text(\n                                    value\n                                ),\n                              );\n                            }).toList(),\n                            hint: Text(\"Maß\"),\n                            onChanged: (String newValue){\n                              setState(() {\n                                selectedMass = newValue;\n                              });\n                            },\n                            value: selectedMass,\n                          ),\n                        ),\n                        Padding(\n                          padding: EdgeInsets.only(left: 10.0, top: 8.0),\n                          child: Container(\n                            width: 100.0,\n                            child: TextFormField(\n                              controller: zNamenController,\n                              decoration: InputDecoration(\n                                contentPadding: EdgeInsets.only(bottom: 5.0),\n                                enabledBorder: UnderlineInputBorder(\n                                  borderSide: BorderSide(color: Colors.black12, style: BorderStyle.solid),\n                                ),\n                                hintText: \"Bezeichnung\"\n                              ),\n                              keyboardType: TextInputType.text\n                            ),\n                          ),\n                        )\n                      ],\n                    ),\n                    trailing: IconButton(\n                      tooltip: \"hinzufügen\",\n                      icon: Icon(Icons.check),\n                      onPressed: (){\n                        setState(() {\n                          zutatenHeight += 50.0;\n                          zNumber.add(double.parse(zNumberController.text));\n                          zNumberController.clear();\n\n                          zMass.add(selectedMass);\n                          selectedMass == null;\n\n                          zNamen.add(zNamenController.text);\n                          zNamenController.clear();\n                        });\n                      },\n                    ),\n                  ),\n                  Divider(\n\n                  ),\n                  Container(\n                    height: zutatenHeight+6,\n                    child:ListView.builder(\n                      scrollDirection: Axis.vertical,\n                      itemCount: zNamen.length,\n                      itemBuilder: (BuildContext ctxt, int index){\n                        final name = zNamen[index];\n                        final number = zNumber[index];\n                        final mass = zMass[index];\n\n                        return Dismissible(\n                          background: Container(\n                            alignment: Alignment.centerLeft,\n                            padding: EdgeInsets.only(left: 20.0),\n                            color: Colors.redAccent,\n                            child: Icon(OMIcons.delete, color: Colors.white),\n                          ),\n                          secondaryBackground: Container(\n                            alignment: Alignment.centerRight,\n                            padding: EdgeInsets.only(right: 20.0),\n                            color: Colors.orangeAccent,\n                            child: Icon(OMIcons.edit, color: Colors.white),\n                          ),\n                          key: Key(name),\n                          child: Column(\n                            crossAxisAlignment: CrossAxisAlignment.start,\n                            children: <Widget>[\n                              ListTile(\n                                leading: IconButton(\n                                  icon: Icon(Icons.remove),\n                                  onPressed: (){\n                                    reduceZNumber(index);\n                                  },\n                                ),\n                                title: Row(\n                                  crossAxisAlignment: CrossAxisAlignment.start,\n                                  children: <Widget>[\n                                    Text(\n                                      number.toString()+mass+\" \"+name[index]\n                                    )\n                                  ],\n                                ),\n                                trailing: IconButton(\n                                  icon: Icon(Icons.add),\n                                  onPressed: (){\n                                    zNumber[index]++;\n                                  }\n                                ),\n                              ),\n                            ],\n                          ),\n                          direction: (zNamenController.text.isEmpty\n                              ? DismissDirection.horizontal\n                              : DismissDirection.startToEnd\n                          ),\n                          onDismissed: (direction){\n                            if(direction == DismissDirection.startToEnd){\n                              setState(() {\n                                reduceZNumber(index);\n\n                                zNamen.removeAt(index);\n                                zMass.removeAt(index);\n                                zNumber.removeAt(index);\n                              });\n                            } else if(direction == DismissDirection.endToStart){\n                              if(zNamenController.text.isNotEmpty){\n                                showBottomSnack(\"Dismissed abortion\");\n                              } else if(zNamenController.text.isEmpty){\n                                zNamenController.text = zNamen[index];\n                                zNumberController.text = zNumber[index].toString();\n                                selectedMass = zMass[index];\n\n                                zNamen.removeAt(index);\n                                zMass.removeAt(index);\n                                zNumber.removeAt(index);\n\n                                reduceZNumber(index);\n                              }\n\n                              setState(() {});\n                            }\n                          },\n                        );\n                      },\n                    ),\n                  ),\n                ],\n              ),\n            ],\n          ),\n          Column(\n            children: <Widget>[\n              Column(\n                crossAxisAlignment: CrossAxisAlignment.start,\n                children: <Widget>[\n                  Padding(\n                      padding: EdgeInsets.only(top: 10.0, left: 10.0, bottom: 0.0),\n                      child: Text(\n                        \"Zubereitung\",\n                        style: TextStyle(\n                            fontFamily: \"Google-Sans\",\n                            fontWeight: FontWeight.w500,\n                            fontSize: 13.0,\n                            color: Colors.grey[500]\n                        ),\n                      )\n                  ),\n                  Column(\n                    children: <Widget>[\n                      Form(\n                        child: ListTile(\n                          leading: IconButton(\n                            icon: Icon(Icons.clear),\n                            onPressed: (){},\n                          ),\n                          title: TextFormField(\n                            controller: stepDescriptionController,\n                            decoration: InputDecoration(\n                                border: InputBorder.none,\n                                hintText: \"Ein Schritt nach dem Anderen\"\n                            ),\n                            validator: (value){\n                              if(value.isEmpty){\n                                return \"Bitte Text eingeben\";\n                              }\n                            },\n                          ),\n                          trailing: IconButton(\n                            icon: Icon(Icons.check),\n                            onPressed: (){\n                              if(stepDescriptionKey.currentState.validate()){\n                                descriptionHeight+=20.0;\n                                stepDescription.add(stepDescriptionController.text);\n                                stepDescriptionController.clear();\n                                setState(() {});\n                              }\n                            },\n                          ),\n                        ),\n                        key: stepDescriptionKey,\n                      ),\n                      Container(\n                        height: descriptionHeight,\n                        child: DragAndDropList(\n                          stepDescription,\n                          itemBuilder: (BuildContext ctxt, item){\n                            return new SizedBox(\n                              child: new Card(\n                                child: new ListTile(\n                                  leading: CircleAvatar(\n                                    child: Text(\"\"),\n                                  ),\n                                  title: Text(item),\n                                ),\n                              ),\n                            );\n                          },\n                          onDragFinish: (before, after){\n                            String data = stepDescription[before];\n                            stepDescription.removeAt(before);\n                            stepDescription.insert(after, data);\n                            setState(() {});\n                          },\n                          canBeDraggedTo: (one, two) => true,\n                          dragElevation: 6.0,\n                        ),\n                      )\n                    ],\n                  ),\n                  Divider()\n                ],\n              )\n            ],\n          )\n        ],\n      ),\n    );\n  }\n  \n  Future getImage(ImageSource imageSource) async{\n    var takePhoto = await dialogs.takePhoto(context);\n    var image = await ImagePicker.pickImage(source: imageSource);\n    setState(() {\n      _image = image;\n    });\n  }\n\n  void showBottomSnack(String value){\n    _scaffoldKey.currentState.showSnackBar(\n      new SnackBar(\n        content: Text(value),\n      )\n    );\n  }\n\n  void reduceZNumber(int index){\n    if(zNumber[index] > 0.0){\n      zNumber[index]--;\n    } else if(zNumber[index] == 0.0){\n      setState(() {\n        zNamen.removeAt(index);\n        zMass.removeAt(index);\n        zNumber.removeAt(index);\n      });\n    }\n  }\n\n  List<Color> getAvatarColor(){\n    LightMaterialColors lightMaterialColors = new LightMaterialColors();\n    Random rdm = new Random();\n    return lightMaterialColors.getLightColor(rdm.nextInt(14));\n  }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/newRecipe/new_recipe.dart	(revision 3883cf750e888dcadfd085237b109d3985425d4d)
+++ lib/newRecipe/new_recipe.dart	(date 1537874300000)
@@ -5,11 +5,14 @@
 import 'package:flutter/material.dart';
 import 'package:outline_material_icons/outline_material_icons.dart';
 import 'package:image_picker/image_picker.dart';
-import 'package:flutter_list_drag_and_drop/drag_and_drop_list.dart';
+import 'package:dragable_flutter_list/dragable_flutter_list.dart';
 
 import 'package:recipe/interface/CircularImage.dart';
 import 'package:recipe/interface/lightMaterial.dart';
 import 'package:recipe/Dialogs.dart';
+import 'package:recipe/newRecipe/Allgemein.dart';
+import 'package:recipe/newRecipe/Zubereitung.dart';
+import 'package:recipe/newRecipe/Zutaten.dart';
 
 class NewRecipe extends StatefulWidget{
   @override
@@ -18,6 +21,7 @@
 
 class _NewRecipe extends State<NewRecipe>{
   Dialogs dialogs = new Dialogs();
+  int stepCount = 0;
 
   ScrollController scrollController = new ScrollController();
   File _image;
@@ -51,6 +55,20 @@
   @override
   Widget build(BuildContext context) {
     final theme = Theme.of(context);
+    List<Step> steps = [
+      Step(
+        title: Text("Allgemein"),
+        content: Allgemein()
+      ),
+      Step(
+          title: Text("Zutaten"),
+          content: Zutaten()
+      ),
+      Step(
+          title: Text("Zubereitung"),
+          content: Zubereitung()
+      )
+    ];
 
     return Scaffold(
       key: _scaffoldKey,
@@ -84,16 +102,14 @@
             fontSize: 17.0
           ),
         ),
-      ),
-      body: ListView(
-        children: <Widget>[
-          Padding(
-            padding: EdgeInsets.only(top: 10.0, bottom: 20.0, left: 179.0, right: 179.0),
+        bottom: PreferredSize(
+          preferredSize: const Size.fromHeight(48.0),
+          child: Container(
             child: GestureDetector(
               child: Container(
                 child: (_image == null
-                  ? CircleAvatar(child: Icon(OMIcons.addAPhoto))
-                  : CircularImage(_image)
+                    ? CircleAvatar(child: Icon(OMIcons.addAPhoto))
+                    : CircularImage(_image)
                 ),
                 height: 52.0,
                 width: 50.0,
@@ -105,385 +121,31 @@
               },
             ),
           ),
-          Row(
-            mainAxisAlignment: MainAxisAlignment.spaceBetween,
-            children: <Widget>[
-              Padding(
-                padding: EdgeInsets.only(left: 20.0),
-              ),
-              InkWell(
-                borderRadius: BorderRadius.circular(10.0),
-                onTap: () async{
-                  var returnedNumber = await dialogs.personenAnzahl(context);
-                  print(returnedNumber);
-                },
-                child: Column(
-                  children: <Widget>[
-                    Icon(OMIcons.group),
-                    Center(child: Text(personenAnzahl == null
-                      ? "-"
-                      : personenAnzahl
-                    ))
-                  ],
-                ),
-              ),
-              InkWell(
-                borderRadius: BorderRadius.circular(10.0),
-                onTap: (){
-                  //dialog mit eingabe der zeit der zubereitung
-                },
-                child: Column(
-                  children: <Widget>[
-                    Icon(OMIcons.avTimer),
-                    Center(child: Text("-"))
-                  ],
-                ),
-              ),
-              Padding(
-                padding: EdgeInsets.only(right: 20.0),
-              )
-            ],
-          ),
-          Column(
-            crossAxisAlignment: CrossAxisAlignment.start,
-            children: <Widget>[
-              Padding(
-                  padding: EdgeInsets.only(top: 10.0, left: 10.0, bottom: 0.0),
-                  child: Text(
-                    "Allgemein",
-                    style: TextStyle(
-                        fontFamily: "Google-Sans",
-                        fontWeight: FontWeight.w500,
-                        fontSize: 13.0,
-                        color: Colors.grey[500]
-                    ),
-                  )
-              ),
-              Column(
-                children: <Widget>[
-                  ListTile(
-                    leading: Padding(
-                      padding: EdgeInsets.only(bottom: 20.0),
-                      child: Icon(OMIcons.fastfood),
-                    ),
-                    title: TextField(
-                        autofocus: true,
-                        decoration: InputDecoration(
-                          hintText: "Name",
-                        ),
-                        maxLength: 30,
-                        maxLengthEnforced: true
-                    ),
-                  ),
-                  ListTile(
-                    leading: Padding(
-                      padding: EdgeInsets.only(bottom: 20.0),
-                      child: Icon(OMIcons.subject),
-                    ),
-                    title: TextField(
-                      decoration: InputDecoration(
-                          hintText: "Beschreibe dein Rezept..."
-                      ),
-                      keyboardType: TextInputType.multiline,
-                      maxLines: null,
-                      maxLength: 200,
-                    ),
-                  )
-                ],
-              ),
-              Divider()
-            ],
-          ),
-          Column(
-            crossAxisAlignment: CrossAxisAlignment.start,
-            children: <Widget>[
-              Padding(
-                  padding: EdgeInsets.only(top: 10.0, left: 10.0, bottom: 0.0),
-                  child: Text(
-                    "Zutaten",
-                    style: TextStyle(
-                        fontFamily: "Google-Sans",
-                        fontWeight: FontWeight.w500,
-                        fontSize: 13.0,
-                        color: Colors.grey[500]
-                    ),
-                  )
-              ),
-              Column(
-                children: <Widget>[
-                  ListTile(
-                    leading: IconButton(
-                      icon: Icon(Icons.close),
-                      onPressed: (){
-                        zNumberController.clear();
-                        selectedMass = null;
-                        zNamenController.clear();
-                        setState(() {
-                        });
-                      },
-                      tooltip: "leeren",
-                    ),
-                    title: Row(
-                      children: <Widget>[
-                        Container(
-                          width: 50.0,
-                          child: Padding(
-                            padding: EdgeInsets.only(top: 8.0, right: 5.0),
-                            child: TextFormField(
-                              controller: zNumberController,
-                              decoration: InputDecoration(
-                                border: UnderlineInputBorder(
-                                  borderRadius: BorderRadius.all(Radius.circular(2.0)),
-                                ),
-                                contentPadding: EdgeInsets.only(bottom: 5.0),
-                                enabledBorder: UnderlineInputBorder(
-                                  borderSide: BorderSide(color: Colors.black12, style: BorderStyle.solid),
-                                ),
-                                hintText: "2.0"
-                              ),
-                              textAlign: TextAlign.center,
-                              keyboardType: TextInputType.number,
-                            ),
-                          )
-                        ),
-                        Container(
-                          child: new DropdownButton(
-                            items: masses.map((String value){
-                              return new DropdownMenuItem<String>(
-                                value: value,
-                                child: new Text(
-                                    value
-                                ),
-                              );
-                            }).toList(),
-                            hint: Text("Maß"),
-                            onChanged: (String newValue){
-                              setState(() {
-                                selectedMass = newValue;
-                              });
-                            },
-                            value: selectedMass,
-                          ),
-                        ),
-                        Padding(
-                          padding: EdgeInsets.only(left: 10.0, top: 8.0),
-                          child: Container(
-                            width: 100.0,
-                            child: TextFormField(
-                              controller: zNamenController,
-                              decoration: InputDecoration(
-                                contentPadding: EdgeInsets.only(bottom: 5.0),
-                                enabledBorder: UnderlineInputBorder(
-                                  borderSide: BorderSide(color: Colors.black12, style: BorderStyle.solid),
-                                ),
-                                hintText: "Bezeichnung"
-                              ),
-                              keyboardType: TextInputType.text
-                            ),
-                          ),
-                        )
-                      ],
-                    ),
-                    trailing: IconButton(
-                      tooltip: "hinzufügen",
-                      icon: Icon(Icons.check),
-                      onPressed: (){
-                        setState(() {
-                          zutatenHeight += 50.0;
-                          zNumber.add(double.parse(zNumberController.text));
-                          zNumberController.clear();
-
-                          zMass.add(selectedMass);
-                          selectedMass == null;
-
-                          zNamen.add(zNamenController.text);
-                          zNamenController.clear();
-                        });
-                      },
-                    ),
-                  ),
-                  Divider(
-
-                  ),
-                  Container(
-                    height: zutatenHeight+6,
-                    child:ListView.builder(
-                      scrollDirection: Axis.vertical,
-                      itemCount: zNamen.length,
-                      itemBuilder: (BuildContext ctxt, int index){
-                        final name = zNamen[index];
-                        final number = zNumber[index];
-                        final mass = zMass[index];
-
-                        return Dismissible(
-                          background: Container(
-                            alignment: Alignment.centerLeft,
-                            padding: EdgeInsets.only(left: 20.0),
-                            color: Colors.redAccent,
-                            child: Icon(OMIcons.delete, color: Colors.white),
-                          ),
-                          secondaryBackground: Container(
-                            alignment: Alignment.centerRight,
-                            padding: EdgeInsets.only(right: 20.0),
-                            color: Colors.orangeAccent,
-                            child: Icon(OMIcons.edit, color: Colors.white),
-                          ),
-                          key: Key(name),
-                          child: Column(
-                            crossAxisAlignment: CrossAxisAlignment.start,
-                            children: <Widget>[
-                              ListTile(
-                                leading: IconButton(
-                                  icon: Icon(Icons.remove),
-                                  onPressed: (){
-                                    reduceZNumber(index);
-                                  },
-                                ),
-                                title: Row(
-                                  crossAxisAlignment: CrossAxisAlignment.start,
-                                  children: <Widget>[
-                                    Text(
-                                      number.toString()+mass+" "+name[index]
-                                    )
-                                  ],
-                                ),
-                                trailing: IconButton(
-                                  icon: Icon(Icons.add),
-                                  onPressed: (){
-                                    zNumber[index]++;
-                                  }
-                                ),
-                              ),
-                            ],
-                          ),
-                          direction: (zNamenController.text.isEmpty
-                              ? DismissDirection.horizontal
-                              : DismissDirection.startToEnd
-                          ),
-                          onDismissed: (direction){
-                            if(direction == DismissDirection.startToEnd){
-                              setState(() {
-                                reduceZNumber(index);
-
-                                zNamen.removeAt(index);
-                                zMass.removeAt(index);
-                                zNumber.removeAt(index);
-                              });
-                            } else if(direction == DismissDirection.endToStart){
-                              if(zNamenController.text.isNotEmpty){
-                                showBottomSnack("Dismissed abortion");
-                              } else if(zNamenController.text.isEmpty){
-                                zNamenController.text = zNamen[index];
-                                zNumberController.text = zNumber[index].toString();
-                                selectedMass = zMass[index];
-
-                                zNamen.removeAt(index);
-                                zMass.removeAt(index);
-                                zNumber.removeAt(index);
-
-                                reduceZNumber(index);
-                              }
-
-                              setState(() {});
-                            }
-                          },
-                        );
-                      },
-                    ),
-                  ),
-                ],
-              ),
-            ],
-          ),
-          Column(
-            children: <Widget>[
-              Column(
-                crossAxisAlignment: CrossAxisAlignment.start,
-                children: <Widget>[
-                  Padding(
-                      padding: EdgeInsets.only(top: 10.0, left: 10.0, bottom: 0.0),
-                      child: Text(
-                        "Zubereitung",
-                        style: TextStyle(
-                            fontFamily: "Google-Sans",
-                            fontWeight: FontWeight.w500,
-                            fontSize: 13.0,
-                            color: Colors.grey[500]
-                        ),
-                      )
-                  ),
-                  Column(
-                    children: <Widget>[
-                      Form(
-                        child: ListTile(
-                          leading: IconButton(
-                            icon: Icon(Icons.clear),
-                            onPressed: (){},
-                          ),
-                          title: TextFormField(
-                            controller: stepDescriptionController,
-                            decoration: InputDecoration(
-                                border: InputBorder.none,
-                                hintText: "Ein Schritt nach dem Anderen"
-                            ),
-                            validator: (value){
-                              if(value.isEmpty){
-                                return "Bitte Text eingeben";
-                              }
-                            },
-                          ),
-                          trailing: IconButton(
-                            icon: Icon(Icons.check),
-                            onPressed: (){
-                              if(stepDescriptionKey.currentState.validate()){
-                                descriptionHeight+=20.0;
-                                stepDescription.add(stepDescriptionController.text);
-                                stepDescriptionController.clear();
-                                setState(() {});
-                              }
-                            },
-                          ),
-                        ),
-                        key: stepDescriptionKey,
-                      ),
-                      Container(
-                        height: descriptionHeight,
-                        child: DragAndDropList(
-                          stepDescription,
-                          itemBuilder: (BuildContext ctxt, item){
-                            return new SizedBox(
-                              child: new Card(
-                                child: new ListTile(
-                                  leading: CircleAvatar(
-                                    child: Text(""),
-                                  ),
-                                  title: Text(item),
-                                ),
-                              ),
-                            );
-                          },
-                          onDragFinish: (before, after){
-                            String data = stepDescription[before];
-                            stepDescription.removeAt(before);
-                            stepDescription.insert(after, data);
-                            setState(() {});
-                          },
-                          canBeDraggedTo: (one, two) => true,
-                          dragElevation: 6.0,
-                        ),
-                      )
-                    ],
-                  ),
-                  Divider()
-                ],
-              )
-            ],
-          )
-        ],
+        ),
+      ),
+      body: Stepper(
+        steps: steps,
+        currentStep: stepCount,
+        onStepContinue: (){
+          setState(() {
+            stepCount++;
+          });
+        },
+        onStepCancel: (){
+          setState(() {
+            stepCount--;
+          });
+        },
+        onStepTapped: (step){
+          setState(() {
+            stepCount = step;
+          });
+        },
+        type: StepperType.horizontal,
       ),
     );
   }
-  
+
   Future getImage(ImageSource imageSource) async{
     var takePhoto = await dialogs.takePhoto(context);
     var image = await ImagePicker.pickImage(source: imageSource);
